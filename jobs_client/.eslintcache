[{"/Users/peter/Documents/UPENN/cis550/jobs/src/index.js":"1","/Users/peter/Documents/UPENN/cis550/jobs/src/App.js":"2","/Users/peter/Documents/UPENN/cis550/jobs/src/pages/job/Jobs.js":"3","/Users/peter/Documents/UPENN/cis550/jobs/src/constants/constants.js":"4","/Users/peter/Documents/UPENN/cis550/jobs/src/components/JobContent/JobContent.js":"5","/Users/peter/Documents/UPENN/cis550/jobs/src/components/JobSideList/JobSideList.js":"6","/Users/peter/Documents/UPENN/cis550/jobs/src/components/FilterBox/FilterBox.js":"7"},{"size":196,"mtime":1607090608708,"results":"8","hashOfConfig":"9"},{"size":175,"mtime":1607349791259,"results":"10","hashOfConfig":"9"},{"size":1670,"mtime":1607332839159,"results":"11","hashOfConfig":"9"},{"size":175,"mtime":1607349585478,"results":"12","hashOfConfig":"9"},{"size":593,"mtime":1607332771292,"results":"13","hashOfConfig":"9"},{"size":1073,"mtime":1607345718496,"results":"14","hashOfConfig":"9"},{"size":4646,"mtime":1607343808933,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"c19pij",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"19"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},"/Users/peter/Documents/UPENN/cis550/jobs/src/index.js",["36"],"import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n",["37","38"],"/Users/peter/Documents/UPENN/cis550/jobs/src/App.js",["39"],"import React, { useState } from \"react\";\nimport Jobs from \"./pages/job/Jobs\";\n\nconst App = () => {\n  return (\n    <div>\n      <Jobs />\n    </div>\n  );\n};\n\nexport default App;\n","/Users/peter/Documents/UPENN/cis550/jobs/src/pages/job/Jobs.js",[],"/Users/peter/Documents/UPENN/cis550/jobs/src/constants/constants.js",[],"/Users/peter/Documents/UPENN/cis550/jobs/src/components/JobContent/JobContent.js",["40"],"import React, { useState } from \"react\";\nimport \"./JobContent.css\";\n\nconst JobContent = (props) => {\n  const { selectedJob } = props;\n  return (\n    <div className=\"job-detail-container\">\n      <h1>JobTitle: {selectedJob ? selectedJob[\"JobTitle\"] : null}</h1>\n      <h2>Salary: {selectedJob ? selectedJob[\"Salary\"] : null}</h2>\n      <h2>Location: {selectedJob ? selectedJob[\"Location\"] : null}</h2>\n      <h2>Post Date: {selectedJob ? selectedJob[\"Post Date\"] : null}</h2>\n      <h2>Job Type: {selectedJob ? selectedJob[\"Job Type\"] : null}</h2>\n    </div>\n  );\n};\n\nexport default JobContent;\n","/Users/peter/Documents/UPENN/cis550/jobs/src/components/JobSideList/JobSideList.js",[],"/Users/peter/Documents/UPENN/cis550/jobs/src/components/FilterBox/FilterBox.js",["41"],"import React, { useState, useEffect } from \"react\";\nimport { fetchAllJobUrl } from \"../../constants/constants\";\nimport \"./FilterBox.css\";\n\nconst FilterBox = (props) => {\n  const {\n    setAllJob,\n    jobTitle,\n    setJobTitle,\n    location,\n    setLocation,\n    jobType,\n    setJobType,\n    salaryMin,\n    setSalaryMin,\n    salaryMax,\n    setSalaryMax,\n  } = props;\n\n  const filterSearch = () => {\n    let finalQuery = \"\";\n    let jobTitleQuery = \"\";\n    let locationQuery = \"\";\n    let jobTypeQuery = \"\";\n    let salaryMinQuery = \"\";\n    let salaryMaxQuery = \"\";\n    let baseUrl = fetchAllJobUrl + \"?\";\n    if (jobTitle) {\n      jobTitleQuery = `&jobTitle=${jobTitle}`;\n    }\n    if (location) {\n      locationQuery = `&location=${location}`;\n    }\n    if (jobType.includes(true)) {\n      if (jobType[0]) {\n        jobTypeQuery += `&jobType=\"full-time\"`;\n      }\n      if (jobType[1]) {\n        jobTypeQuery += `&jobType=\"part-time\"`;\n      }\n      if (jobType[2]) {\n        jobTypeQuery += `&jobType=\"intern\"`;\n      }\n    }\n    if (salaryMin) {\n      salaryMinQuery = `&salaryMin=${salaryMin}`;\n    }\n    if (salaryMax) {\n      salaryMaxQuery = `&salaryMax=${salaryMax}`;\n    }\n\n    finalQuery =\n      baseUrl +\n      jobTitleQuery +\n      locationQuery +\n      jobTypeQuery +\n      salaryMinQuery +\n      salaryMaxQuery;\n\n    if (finalQuery.length > baseUrl.length) {\n      finalQuery =\n        finalQuery.slice(0, baseUrl.length) +\n        finalQuery.slice(baseUrl.length + 1);\n    }\n\n    console.log(\"finalQuery\", finalQuery);\n\n    return finalQuery;\n  };\n\n  const filterFetch = async () => {\n    const filterJobData = await fetch(filterSearch()).then((res) => res.json());\n    console.log(\"filterJobData\", filterJobData);\n    // if (Array.isArray(filterJobData)) {\n    //   setAllJob(filterJobData);\n    // }\n    setAllJob(filterJobData);\n  };\n\n  useEffect(() => {\n    console.log(\"jobTitle\", jobTitle);\n  }, [jobTitle]);\n\n  useEffect(() => {\n    console.log(\"location\", location);\n  }, [location]);\n\n  useEffect(() => {\n    console.log(\"jobType\", jobType);\n  }, [jobType]);\n\n  useEffect(() => {\n    console.log(\"min\", salaryMin);\n  }, [salaryMin]);\n\n  useEffect(() => {\n    console.log(\"max\", salaryMax);\n  }, [salaryMax]);\n\n  return (\n    <div>\n      <div className=\"job-search-container\">\n        <div>\n          <input\n            className=\"job-title-input-box\"\n            type=\"text\"\n            placeholder=\"Search Job Title\"\n            onChange={(e) => {\n              setJobTitle(e.target.value);\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"filter-box-container\">\n        <div className=\"location-input\">\n          <div>Location: </div>\n          <input\n            type=\"text\"\n            onChange={(e) => {\n              setLocation(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"job-input\">\n          <div>Job type: </div>\n          <div className=\"job-type-input\">\n            <div>\n              <input\n                type=\"checkbox\"\n                onChange={() =>\n                  setJobType([!jobType[0], jobType[1], jobType[2]])\n                }\n              />\n              <label>full-time</label>\n            </div>\n            <div>\n              <input\n                type=\"checkbox\"\n                onChange={() =>\n                  setJobType([jobType[0], !jobType[1], jobType[2]])\n                }\n              />\n              <label>part-time</label>\n            </div>\n            <div>\n              <input\n                type=\"checkbox\"\n                onChange={() =>\n                  setJobType([jobType[0], jobType[1], !jobType[2]])\n                }\n              />\n              <label>intern</label>\n            </div>\n          </div>\n        </div>\n        <div className=\"salary-input\">\n          <div>Salary: </div>\n          <div className=\"salary-min-max-input\">\n            <div className=\"salary-min-input\">\n              min\n              <input\n                type=\"number\"\n                min={0}\n                onChange={(e) => {\n                  setSalaryMin(e.target.value);\n                }}\n              />\n            </div>\n            <div className=\"salary-max-input\">\n              max\n              <input\n                type=\"number\"\n                min={0}\n                onChange={(e) => {\n                  setSalaryMax(e.target.value);\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        <div className=\"submit-button\" onClick={() => filterFetch()}>\n          Submit\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FilterBox;\n",["42","43"],{"ruleId":"44","severity":1,"message":"45","line":3,"column":10,"nodeType":"46","messageId":"47","endLine":3,"endColumn":23},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"44","severity":1,"message":"52","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"52","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"44","severity":1,"message":"52","line":1,"column":17,"nodeType":"46","messageId":"47","endLine":1,"endColumn":25},{"ruleId":"48","replacedBy":"53"},{"ruleId":"50","replacedBy":"54"},"no-unused-vars","'BrowserRouter' is defined but never used.","Identifier","unusedVar","no-native-reassign",["55"],"no-negated-in-lhs",["56"],"'useState' is defined but never used.",["55"],["56"],"no-global-assign","no-unsafe-negation"]